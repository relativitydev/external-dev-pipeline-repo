# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master
- develop

pr:
- master
- develop

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ${{ if eq( variables['Build.SourceBranchName'], 'master' ) }}: 
    developAbbreviation: ""
    buildCounter: ""
  ${{ if ne( variables['Build.SourceBranchName'], 'master' ) }}: 
    developAbbreviation: "-DEV-"
    buildCounter: $[counter(variables['buildNumber'], 1)]
  instanceRelativityVersion: ""


name: $(buildVersion)$(developAbbreviation)$(buildCounter)

steps:
- task: NuGetToolInstaller@1

# Restore Nuget Packages
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# Build Solution
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Run Unit Tests
- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\bin\**\UnitTests.dll
    searchFolder: '$(System.DefaultWorkingDirectory)'
    distributionBatchType: 'basedOnAssembly'

# Run Integration Tests
- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\bin\**\ExternalDevPipelineRepo.dll
    searchFolder: '$(System.DefaultWorkingDirectory)'
    distributionBatchType: 'basedOnAssembly'
    runSettingsFile: 'ExternalDevPipelineRepo\ExternalDevPipelineRepo\test.runsettings'
    overrideTestrunParameters:
      -WorkspaceID $(workspaceID)
      -TestWorkspaceName $(testWorkspaceName) 
      -TestWorkspaceTemplateName $(testWorkspaceTemplateName)
      -AdminUsername $(adminUsername)
      -AdminPassword $(adminPassword)
      -SqlUserName $(sqlUserName)
      -SqlPassword $(sqlPassword)
      -SqlServerAddress $(sqlServerAddress)
      -TestingServiceRapPath $(testingServiceRapPath)
      -UploadTestingServiceRap $(uploadTestingServiceRap)
      -RSAPIServerAddress $(rsapiServerAddress)
      -RESTServerAddress $(restServerAddress)
      -ServerBindingType $(serverBindingType)
      -RelativityInstanceAddress $(relativityInstanceAddress)

# Build Rap File
- task: CmdLine@2
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)\ExternalDevPipelineRepo\SampleAppBuiler\bin'
    script: '.\kCura.RAPBuilder.exe /source:$(System.DefaultWorkingDirectory)\ExternalDevPipelineRepo\SampleAppBuiler\ /input:$(System.DefaultWorkingDirectory)\ExternalDevPipelineRepo\SampleAppBuiler\build.xml /servertype:local /version:1.0.0.3'

# Push Rap File to Artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)\ExternalDevPipelineRepo\SampleAppBuiler\bin\SampleAppBuiler.rap'
    ArtifactName: 'RelativityApplication'
    publishLocation: 'Container'

# Get Instance Relativity Version
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $bytes = [System.Text.Encoding]::ASCII.GetBytes($(adminUsername)+":"+$(adminPassword))
      $base64 = [System.Convert]::ToBase64String($bytes)
      $uriString = $(serverBindingType)+"://"+$(restServerAddress)+"/relativity.rest/api/Relativity.Services.InstanceDetails.IInstanceDetailsModule/InstanceDetailsService/GetRelativityVersionAsync"
      $Uri = [System.Uri]$uriString
      $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
      $headers.Add("X-CSRF-Header", "-")
      $headers.Add("Authorization", "Basic $base64")
      $Result = Invoke-RestMethod -Uri $Uri -Method Post -ContentType 'application/json' -Headers $headers
      Write-Host $Result
      Write-Host "##vso[task.setvariable variable=instanceRelativityVersion;]$Result"
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

# Create New Version / Push Rap File to Solution Snapshot
- task: PowerShell@2
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)\UploadRapToSolutionSnapshotWebsite.ps1'
    arguments: '$(salesforceUsername) $(salesforcePassword) $(applicationGuid) $(buildVersion) $(instanceRelativityVersion) $(System.DefaultWorkingDirectory)\ExternalDevPipelineRepo\SampleAppBuiler\bin\SampleAppBuiler.rap'
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))